{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Dagger Rules","text":"<p>Static analysis checks for Dagger and related libraries Anvil and Hilt that provide some opinionated suggestions on how to structure your DI code as well as checks for common Dagger issues.</p>"},{"location":"#installation","title":"Installation","text":"<pre><code>repositories {\n    // Stable releases\n    mavenCentral()\n\n    // Snapshots \n    maven(url = \"https://central.sonatype.com/repository/maven-snapshots/\")\n}\n\ndependencies {\n    // Use for vanilla dagger rules\n    lintChecks(\"dev.whosnickdoglio.dagger-rules:dagger-lint:&lt;version&gt;\")\n\n    // Use for Anvil rules\n    lintChecks(\"dev.whosnickdoglio.dagger-rules:anvil-lint:&lt;version&gt;\")\n\n    // Use for Hilt rules\n    lintChecks(\"dev.whosnickdoglio.dagger-rules:hilt-lint:&lt;version&gt;\")\n}\n</code></pre>"},{"location":"#license","title":"License","text":"<pre><code>MIT License\n\nCopyright (C) 2025 Nicholas Doglio\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n</code></pre>"},{"location":"CHANGELOG/","title":"Changelog","text":"<p>All notable changes to this project will be documented in this file.</p> <p>The format is based on Keep a Changelog, and this project adheres to Semantic Versioning.</p>"},{"location":"CHANGELOG/#unreleased","title":"[Unreleased]","text":""},{"location":"CODE_OF_CONDUCT/","title":"Contributor Covenant Code of Conduct","text":""},{"location":"CODE_OF_CONDUCT/#our-pledge","title":"Our Pledge","text":"<p>We as members, contributors, and leaders pledge to make participation in our community a harassment-free experience for everyone, regardless of age, body size, visible or invisible disability, ethnicity, sex characteristics, gender identity and expression, level of experience, education, socio-economic status, nationality, personal appearance, race, caste, color, religion, or sexual identity and orientation.</p> <p>We pledge to act and interact in ways that contribute to an open, welcoming, diverse, inclusive, and healthy community.</p>"},{"location":"CODE_OF_CONDUCT/#our-standards","title":"Our Standards","text":"<p>Examples of behavior that contributes to a positive environment for our community include:</p> <ul> <li>Demonstrating empathy and kindness toward other people</li> <li>Being respectful of differing opinions, viewpoints, and experiences</li> <li>Giving and gracefully accepting constructive feedback</li> <li>Accepting responsibility and apologizing to those affected by our mistakes,   and learning from the experience</li> <li>Focusing on what is best not just for us as individuals, but for the overall   community</li> </ul> <p>Examples of unacceptable behavior include:</p> <ul> <li>The use of sexualized language or imagery, and sexual attention or advances of   any kind</li> <li>Trolling, insulting or derogatory comments, and personal or political attacks</li> <li>Public or private harassment</li> <li>Publishing others' private information, such as a physical or email address,   without their explicit permission</li> <li>Other conduct which could reasonably be considered inappropriate in a   professional setting</li> </ul>"},{"location":"CODE_OF_CONDUCT/#enforcement-responsibilities","title":"Enforcement Responsibilities","text":"<p>Community leaders are responsible for clarifying and enforcing our standards of acceptable behavior and will take appropriate and fair corrective action in response to any behavior that they deem inappropriate, threatening, offensive, or harmful.</p> <p>Community leaders have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, and will communicate reasons for moderation decisions when appropriate.</p>"},{"location":"CODE_OF_CONDUCT/#scope","title":"Scope","text":"<p>This Code of Conduct applies within all community spaces, and also applies when an individual is officially representing the community in public spaces. Examples of representing our community include using an official e-mail address, posting via an official social media account, or acting as an appointed representative at an online or offline event.</p>"},{"location":"CODE_OF_CONDUCT/#enforcement","title":"Enforcement","text":"<p>Instances of abusive, harassing, or otherwise unacceptable behavior may be reported to the community leaders responsible for enforcement at [INSERT CONTACT METHOD]. All complaints will be reviewed and investigated promptly and fairly.</p> <p>All community leaders are obligated to respect the privacy and security of the reporter of any incident.</p>"},{"location":"CODE_OF_CONDUCT/#enforcement-guidelines","title":"Enforcement Guidelines","text":"<p>Community leaders will follow these Community Impact Guidelines in determining the consequences for any action they deem in violation of this Code of Conduct:</p>"},{"location":"CODE_OF_CONDUCT/#1-correction","title":"1. Correction","text":"<p>Community Impact: Use of inappropriate language or other behavior deemed unprofessional or unwelcome in the community.</p> <p>Consequence: A private, written warning from community leaders, providing clarity around the nature of the violation and an explanation of why the behavior was inappropriate. A public apology may be requested.</p>"},{"location":"CODE_OF_CONDUCT/#2-warning","title":"2. Warning","text":"<p>Community Impact: A violation through a single incident or series of actions.</p> <p>Consequence: A warning with consequences for continued behavior. No interaction with the people involved, including unsolicited interaction with those enforcing the Code of Conduct, for a specified period of time. This includes avoiding interactions in community spaces as well as external channels like social media. Violating these terms may lead to a temporary or permanent ban.</p>"},{"location":"CODE_OF_CONDUCT/#3-temporary-ban","title":"3. Temporary Ban","text":"<p>Community Impact: A serious violation of community standards, including sustained inappropriate behavior.</p> <p>Consequence: A temporary ban from any sort of interaction or public communication with the community for a specified period of time. No public or private interaction with the people involved, including unsolicited interaction with those enforcing the Code of Conduct, is allowed during this period. Violating these terms may lead to a permanent ban.</p>"},{"location":"CODE_OF_CONDUCT/#4-permanent-ban","title":"4. Permanent Ban","text":"<p>Community Impact: Demonstrating a pattern of violation of community standards, including sustained inappropriate behavior, harassment of an individual, or aggression toward or disparagement of classes of individuals.</p> <p>Consequence: A permanent ban from any sort of public interaction within the community.</p>"},{"location":"CODE_OF_CONDUCT/#attribution","title":"Attribution","text":"<p>This Code of Conduct is adapted from the Contributor Covenant, version 2.1, available at https://www.contributor-covenant.org/version/2/1/code_of_conduct.html.</p> <p>Community Impact Guidelines were inspired by Mozilla's code of conduct enforcement ladder.</p> <p>For answers to common questions about this code of conduct, see the FAQ at https://www.contributor-covenant.org/faq. Translations are available at https://www.contributor-covenant.org/translations.</p>"},{"location":"CONTRIBUTING/","title":"Welcome! Thank you for considering contributing to this project!","text":"<p>Adhering to the following guidelines will help make the development process for all of us a lot smoother, more productive and painless.</p>"},{"location":"CONTRIBUTING/#ground-rules","title":"Ground Rules","text":"<p>Please make sure to review and follow the Code of Conduct when making contributions to this project.</p>"},{"location":"CONTRIBUTING/#your-first-contribution","title":"Your First Contribution","text":"<p>Check out any open issues, anything labeled \"help wanted\" is up for grabs, if you see another issue you're interested in feel free to comment on and see if it's available to be worked on.</p>"},{"location":"CONTRIBUTING/#getting-started","title":"Getting started","text":"<ol> <li>Create your own fork of the code</li> <li>Create a branch for your work</li> <li>Open up a PR against <code>trunk</code></li> </ol>"},{"location":"CONTRIBUTING/#how-to-report-a-bug-or-suggest-a-feature-enhancement","title":"How to report a bug or suggest a feature / enhancement","text":"<p>Open an issue and follow the necessary template to get a discussion going for a bug or feature.</p>"},{"location":"rules/","title":"Rules","text":""},{"location":"rules/#dagger-rules","title":"Dagger Rules","text":""},{"location":"rules/#types-annotated-with-component-must-be-abstract","title":"Types annotated with <code>@Component</code> must be abstract","text":"<p>Types annotated with the <code>@Component</code> annotation need to be abstract so Dagger can generate a class that implements it. If a concrete class is annotated with <code>@Component</code> Dagger will throw an error at compile time.</p> <p><code>error: @Component may only be applied to an interface or abstract class</code></p> <pre><code>\n// Safe\n@Component\ninterface MyComponent\n\n// Safe\n@Component\nabstract class MyComponent\n\n// Not Safe!\n@Component\nclass MyComponent\n</code></pre>"},{"location":"rules/#prefer-constructor-injection-over-field-injection","title":"Prefer constructor injection over field injection","text":"<p>Field injection should only ever be used for classes that you don't manage their creation (like Android <code>Activities</code> or <code>Fragments</code>) if the creation of the class you're trying to add to the Dagger graph isn't managed by something else like the Android OS you should be using constructor injection.</p> <pre><code>\nclass MyClass {\n    // BAD! don't do this!\n    @Inject\n    lateinit var foo: Foo\n}\n\n// Good!\nclass MyClass @Inject constructor(private val foo: Foo)\n\n</code></pre> <p>There are a few reasons we want to favor constructor injection over field injection. The first being is we should think of a class constructor as a contract of sorts, \"if I provide you these dependencies then in return you give me an instance of this class\", if we're doing field injection this resides outside the constructor and isn't intuitive that this class requires additional setup which can lead to consumers misusing it or bugs. The second being with constructor injection, we can make our dependencies both private and immutable, so they cannot be altered by anything outside this class nor could they be reassigned somewhere within the class, because Dagger requires field injection to be public and mutable this gives things outside our class the ability to mutate or reassign our dependencies which could lead to unpredictable and hard to debug issues.</p> <p>More information here: Keeping the Daggers Sharp</p>"},{"location":"rules/#methods-annotated-with-binds-must-be-abstract","title":"Methods annotated with <code>@Binds</code> must be abstract","text":"<p>Methods annotated with the <code>@Binds</code> annotation need to be abstract. The <code>@Binds</code> annotation is used to tell Dagger to delegate to a concrete implementation when injecting an interface. Dagger requires these methods to be abstract and will throw an error at compile time if they are not.</p> <p><code>error: @Binds methods must be abstract</code></p> <pre><code>\n// Safe\n@Module\ninterface MyModule {\n    fun bindMyThing(impl: MyThingImpl): MyThing\n}\n\n// Not Safe!\n@Module\nobject MyModule {\n\n    @Binds\n    fun bindMyThing(): MyThing = MyThingImpl()\n}\n</code></pre>"},{"location":"rules/#a-binds-method-parameter-should-be-a-subclass-of-its-return-type","title":"A <code>@Binds</code> method parameter should be a subclass of it's return type","text":"<p>The <code>@Binds</code> annotation is used to connect a concrete implementation of a class to it's interface in the Dagger graph so consumers can easily swap out different implementations of an interface in different scenarios (prod vs test code). The parameter of a <code>@Binds</code> method needs to be a subclass of the return type or else Dagger will throw an error at compile time.</p> <p><code>error: @Binds methods' parameter type must be assignable to the return type</code></p> <pre><code>@Module\ninterface BindModule {\n\n    // Safe\n    @Binds\n    fun bindNetworkRepository(impl: NetworkRepository): Repository\n\n    // Not Safe\n    @Binds\n    fun bindRepository(impl: NotARepository): Repository\n}\n</code></pre>"},{"location":"rules/#classes-with-provides-binds-or-multibinds-methods-should-be-annotated-with-module","title":"Classes with <code>@Provides</code>, <code>@Binds</code> or <code>@Multibinds</code> methods should be annotated with <code>@Module</code>","text":"<p>A class or interface that contains <code>@Provides</code>, <code>@Binds</code> or <code>@Multibinds</code> methods requires the <code>@Module</code> for Dagger to pick up these methods and apply them to your Dagger graph, without this annotation Dagger will fail at compile time.</p> <pre><code>\n// Missing @Module annotation, nothing is added to DI graph\ninterface MyBrokenModule {\n    @Binds\n    fun bind(impl: ThingImpl): Thing\n\n    companion object {\n        @Provides\n        fun provideMyFactory(): MyFactory = MyFactory.create()\n    }\n}\n\n@Module // everything added to DI graph!\ninterface MyWorkingModule {\n    @Binds\n    fun bind(impl: ThingImpl): Thing\n\n    companion object {\n        @Provides\n        fun provideMyFactory(): MyFactory = MyFactory.create()\n    }\n}\n</code></pre>"},{"location":"rules/#provides-methods-should-be-static","title":"<code>@Provides</code> methods should be static","text":"<p><code>@Provides</code> methods that are static will generate will allow Dagger to generate more efficient code under the hood.</p> <p>In Java this would just be adding the <code>static</code> keyword to your provides method like so:</p> <pre><code>\n@Module\npublic final class StaticModule {\n\n    @Provides\n    public static MyFactory provideMyFactory() {\n        return MyFactory.create();\n    }\n}\n</code></pre> <p>In Kotlin as of Dagger 2.26 you only need to make your module a Kotlin <code>object</code> to get the same benefits as <code>static</code> in Java.</p> <pre><code>@Module\nobject StaticModule {\n    @Provides\n    fun provideMyFactory(): MyFactory = MyFactory.create()\n}\n</code></pre> <p>More information here: Keeping the Daggers Sharp</p>"},{"location":"rules/#objects-on-the-di-graph-can-only-have-one-scope-annotation","title":"Objects on the DI graph can only have one <code>@Scope</code> annotation","text":"<p>Dagger supports the concept of scoping classes to the lifecycle of <code>Components</code> by annotating them with the same scope annotation. This means when you access a dependency that shares the same scope annotation as a <code>Component</code> you will get the same instance each time. Scopes, however, are not repeatable, and you are unable to connect a class to multiple scopes; Dagger will fail at compile time when attempting to do this.</p> <p><code>error: A single binding may not declare more than one @Scope</code></p> <pre><code>@Scope\nannotation class AppScope\n\n@Scope\nannotation class FeatureScope\n\n// Unsafe will error at compile time\n@FeatureScope\n@AppScope\nclass MyThing @Inject constructor()\n\n// Safe\n@AppScope\nclass MyOtherThing @Inject constructor()\n</code></pre>"},{"location":"rules/#classes-annotated-with-scopes-require-their-constructors-to-be-annotated-with-inject-to-be-added-to-the-dagger-graph","title":"Classes annotated with scopes require their constructors to be annotated with <code>@Inject</code> to be added to the Dagger graph","text":"<p>Dagger supports the concept of scoping classes to the lifecycle of <code>Components</code> by annotating them with the same scope annotation and adding them to the DI graph. For example, if there is an <code>AppComponent</code> annotated with the <code>@Singleton</code> scope and another class in the project is annotated with <code>@Singleton</code> the same instance of that class will be retained as long as <code>AppComponent</code> is. Adding the same scope annotation is only part of the process, we must all ensure the class is added to the Dagger graph by annotating one of its constructors with the <code>@Inject</code> annotation.</p> <pre><code>@Singleton\n@Component\ninterface AppComponent\n\n// Is not part of the DI graph and won't be scoped as a singleton\n@Singleton MyClass()\n\n// is part of the DI graph and will be scoped as a singleton\n@Singleton MyOtherClass @Inject constructor()\n</code></pre>"},{"location":"rules/#valid-component-methods","title":"Valid <code>@Component</code> methods","text":"<p><code>@Components</code> and <code>@Subcomponents</code> only support two types of methods, provision methods and members-injection methods. Trying to add any other kind of method to your component will lead to a crash at compile time.</p>"},{"location":"rules/#provision-methods","title":"Provision methods","text":"<p>Provision methods cover exposing specific dependencies from your graph via the <code>@Component</code> and are defined as \"Provision methods have no parameters and return an injected or provided type.\"</p> <pre><code>\n// All valid provision methods\n@Component\ninterface AppComponent {\n\n    fun myThing(): MyThing\n\n    fun myMultipleOtherThings(): Set&lt;MyOtherThing&gt;\n\n    @Qualified\n    fun MyQualifiedThing(): MyQualifiedThing\n}\n</code></pre>"},{"location":"rules/#member-injection-methods","title":"Member-injection methods","text":"<p>Member injection methods are used to supply dependencies to the parameter supplied to the method. Method injection methods are defined as \"Members-injection methods have a single parameter and inject dependencies into each of the Inject-annotated fields and methods of the passed instance. A members-injection method may be void or return its single parameter as a convenience for chaining\"</p> <pre><code>// All valid member injection methods\n@Component\ninterface AppComponent {\n    fun inject(target: MyFragment)\n    fun inject(target: MyOtherFragment): MyOtherFragment\n}\n</code></pre> <p>In the example above when you call <code>AppComponent.inject</code> in <code>MyFragment</code> any dependencies annotated with <code>@Inject</code> will be supplied.</p> <p>More information here:  <code>@Component</code> Dagger documentation</p>"},{"location":"rules/#anvil-rules","title":"Anvil Rules","text":""},{"location":"rules/#prefer-using-contributesbinding-over-binds","title":"Prefer using <code>@ContributesBinding</code> over <code>@Binds</code>","text":"<p>Anvil provides the <code>@ContributesBinding</code> annotation as a way to reduce the amount of code we have to write to bind an implementation to it's interface in the Dagger graph. Instead of creating a <code>@Binds</code> function in a <code>@Module</code> (or creating a whole new module for this) we can annotate the implementation directly to bind it!</p> <p>Let's say we had a <code>Repository</code> interface that is implemented by <code>NetworkRepository</code> this is the code we would need to bind <code>NetworkRepository</code> to <code>Repository</code> in the Dagger graph using Hilt.</p> <pre><code>interface Repository\n\nclass NetworkRepository @Inject constructor() : Repository\n\n@Module\n@InstallIn(SingletonComponent::class)\ninterface RepositoryBindsModule {\n\n    @Binds\n    fun bindRepository(networkRepository: NetworkRepository): Repository\n}\n</code></pre> <p>With Anvil, we can remove the <code>RepositoryBindsModule</code> completely!</p> <pre><code>\ninterface Repository\n\n@ContributesBinding(AppScope::class)\nclass NetworkRepository @Inject constructor() : Repository\n</code></pre>"},{"location":"rules/#classes-annotated-with-contributesbinding-or-contributesmultibinding-should-have-a-supertype-to-be-bound-to","title":"Classes annotated with <code>@ContributesBinding</code> or <code>@ContributesMultibinding</code> should have a supertype to be bound to","text":"<p>The <code>@ContributesBinding</code> and <code>@ContributesMultibinding</code> annotations are used to bind a concrete implementation of an interface or abstract class to it's super in the DI graph. If you attempt to use one of these annotations with a class without a super, it will crash at compile time.</p> <p><code>dev.whosnickdoglio.dagger.MyThing contributes a binding, but does not specify the bound type. This is only allowed with exactly one direct super type. If there are multiple or none, then the bound type must be explicitly defined in the @ContributesBinding annotation.</code></p> <p>There is one notable exception to this where you can set the <code>boundType</code> to <code>Any</code> since it's a super for all Kotlin classes.</p> <pre><code>interface Thing\n\n// Not safe and will crash at compile time\n@ContributesBinding(AppScope::class)\nclass MyThing @Inject constructor()\n\n// Safe!\n@ContributesBinding(AppScope::class)\nclass MyOtherThing @Inject constructor() : Thing\n\n// Also safe!\n@ContributesBinding(AppScope::class, boundType = Any::class)\nclass SomethingElse @Inject constructor()\n</code></pre>"},{"location":"rules/#a-class-annotated-with-module-should-also-be-annotated-with-contributesto","title":"A class annotated with <code>@Module</code> should also be annotated with <code>@ContributesTo</code>","text":"<p>The <code>@ContributesTo</code> annotation from Anvil is how Anvil connects a Dagger <code>@Module</code> in the dependency graph to the Dagger <code>@Component</code> for the provided scope. Without this annotation, anything defined in the given module won't be added to the Dagger graph.</p> <pre><code>\n// Missing @ContributesTo annotation and will not be automatically added to the Dagger graph\n@Module\nobject MyModule {\n\n    @Provides\n    fun provideMyFactory(): MyFactory = MyFactory.create()\n}\n\n// With the @ContributesTo annotation included here, this module will be added the Dagger graph scoped with AppScope\n@ContributesTo(AppScope::class)\n@Module\nobject MyOtherModule {\n\n    @Provides\n    fun provideMyFactory(): MyFactory = MyFactory.create()\n}\n</code></pre>"},{"location":"rules/#anvil-cannot-be-used-from-java","title":"Anvil cannot be used from Java","text":"<p>Anvil is a Kotlin compiler plugin, and therefore does not support being used within Java code.</p> <p>You can, however, use Anvil in Kotlin files in modules with a mixed Java/Kotlin source set.</p>"},{"location":"rules/#hilt-rules","title":"Hilt Rules","text":""},{"location":"rules/#the-entrypoint-annotation-can-only-be-applied-to-interfaces","title":"The <code>@EntryPoint</code> annotation can only be applied to interfaces","text":"<p>The <code>@EntryPoint</code> annotation can be used to define an interface that exposes a dependency on the DI graph to make it easier to consume in places where you currently can't use constructor injection or fully migrate a class to Hilt. This <code>interface</code> will be implemented by the Hilt component it's scoped to, so it's important it's defined as an interface otherwise an error will be thrown at compile time.</p> <p><code>error: [Hilt] Only interfaces can be annotated with @EntryPoint: dev.whosnickdoglio.hilterrors.MyEntryPoint</code></p> <pre><code>// Unsafe and will crash at compile time\n@InstallIn(SingletonComponent::class)\n@EntryPoint\nclass MyEntryPoint {\n\n    fun getMyClass(): MyClass = MyClass()\n}\n\n// Also unsafe and will crash at compile time\n@InstallIn(SingletonComponent::class)\n@EntryPoint\nabstract class MyOtherEntryPoint {\n\n    abstract fun getMyClass(): MyClass\n}\n\n// Safe\n@InstallIn(SingletonComponent::class)\n@EntryPoint\ninterface MySafeEntryPoint {\n\n    fun getMyClass(): MyClass\n}\n</code></pre> <p>Read more about it in the Hilt documentation</p>"},{"location":"rules/#android-components-should-be-annotated-with-androidentrypoint","title":"Android components should be annotated with <code>@AndroidEntryPoint</code>","text":"<p>For member injection to work in classes such as <code>Activites</code>, <code>Fragments</code>, <code>Views</code>, <code>Services</code> and <code>BroadcastRecievers</code> they need to be annotated with the <code>@AndroidEntryPoint</code> annotation, otherwise you'll hit an issue at runtime when trying to use the injected dependencies.</p> <pre><code>\n// Safe\n@AndroidEntryPoint\nclass MyFragment : Fragment() {\n\n    @Inject\n    lateinit var something: Something\n\n    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {\n        super.onViewCreated(view, savedInstanceState)\n        something.doSomething()\n    }\n}\n\n// Unsafe will throw UninitializedPropertyAccessException\n// when trying to use `something`\nclass MyOtherFragment : Fragment() {\n\n    @Inject\n    lateinit var something: Something\n\n    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {\n        super.onViewCreated(view, savedInstanceState)\n        something.doSomething()\n    }\n}\n</code></pre>"},{"location":"rules/#application-subclasses-should-be-annotated-with-hiltandroidapp","title":"<code>Application</code> subclasses should be annotated with <code>@HiltAndroidApp</code>","text":"<p>Hilt requires the <code>Application</code> subclass in your be annotated with the <code>@HiltAndroidApp</code> annotation, this annotation is necessary for generating all the Hilt components and wiring them up. Without this annotation, you'll hit a crash at runtime when the app is first launched.</p> <p><code>java.lang.IllegalStateException: Hilt Activity must be attached to an @HiltAndroidApp Application</code></p> <pre><code>\n// Unsafe, will crash at runtime\nclass HiltApp : Application()\n\n// Safe\n@HiltAndroidApp\nclass HiltApp : Application()\n</code></pre>"},{"location":"rules/#viewmodel-subclasses-should-be-annotated-with-hiltviewmodel","title":"<code>ViewModel</code> subclasses should be annotated with <code>@HiltViewModel</code>","text":"<p>For <code>ViewModels</code> to be correctly wired up by Hilt with their necessary dependencies they need to be annotated with the <code>@HiltViewModel</code> annotation. Without this annotation you'll get a crash at runtime when you try to access the given <code>ViewModel</code>.</p> <p><code>Caused by: java.lang.RuntimeException: Cannot create an instance of class dev.whosnickdoglio.hilterrors.MyViewModel</code></p> <pre><code>// Unsafe\nclass MyViewModel @Inject constructor(\n    private val something: Something\n) : ViewModel()\n\n// Safe\n@HiltViewModel\nclass MyViewModel @Inject constructor(\n    private val something: Something\n) : ViewModel()\n\n// Also safe! If your ViewModel doesn't take any dependencies,\n// it doesn't need any annotations\nclass MyOtherViewModel : ViewModel()\n</code></pre>"},{"location":"rules/#a-class-annotated-with-module-or-entrypoint-should-also-be-annotated-with-installin","title":"A class annotated with <code>@Module</code> or <code>@EntryPoint</code> should also be annotated with <code>@InstallIn</code>","text":"<p>The <code>@InstallIn</code> annotation is how you contribute modules or entry points to the Hilt DI graph, without the <code>@InstallIn</code> annotation these classes won't be connected to the Hilt DI graph and their dependencies won't be available to other classes. Hilt will throw an error at compile time if it notices an entry point or module missing the <code>@InstallIn annotation</code></p> <p><code>error: [Hilt] @EntryPoint dev.whosnickdoglio.hilterrors.TestEntryPoint must also be annotated with @InstallIn</code></p> <p><code>error: [Hilt] dev.whosnickdoglio.hilterrors.MyModule is missing an @InstallIn annotation. If this was intentional, see https://dagger.dev/hilt/flags#disable-install-in-check for how to disable this check.</code></p> <pre><code>// Will crash at compile time\n@EntryPoint\ninterface MyUnsafeEntryPoint {\n    fun getMyClass(): MyClass\n}\n\n// Safe\n@InstallIn(SingletonComponent::class)\n@EntryPoint\ninterface MySafeEntryPoint {\n    fun getMyClass(): MyClass\n}\n\n// Will crash at compile time\n@Module\nobject MyUnsafeModule {\n    @Provides\n    fun provideMyFactory(): MyFactory = MyFactory.create()\n}\n\n// Safe\n@InstallIn(SingletonComponent::class)\n@Module\nobject MySafeModule {\n    @Provides\n    fun provideMyFactory(): MyFactory = MyFactory.create()\n}\n</code></pre> <p>This rule is also configurable if you have custom Hilt components already defined! In your <code>lint.xml</code> file you can add a list of fully qualified class names for any custom Hilt components to be included in the quick fix suggestions.</p> <pre><code>&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n&lt;lint&gt;\n    &lt;issue id=\"MissingInstallInAnnotation\"&gt;\n        &lt;option name=\"customHiltComponents\" value=\"dev.whosnickdoglio.testapp.hilt.MyCustomComponent\"/&gt;\n    &lt;/issue&gt;\n&lt;/lint&gt;\n</code></pre> <p>You can read more about this in the Lint API guide.</p>"}]}